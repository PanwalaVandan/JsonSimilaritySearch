from langchain_community.document_loaders import JSONLoader
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings
from langchain_core.documents import Document
import json

class JSONSearchEngine:
    def __init__(self, json_path):
        self.json_path = json_path
        self.vectorstore = None
        self.embeddings = OpenAIEmbeddings()
    
    def _get_jq_schema(self):
        """Generate the jq schema with all fields included"""
        return r'''
        .[] | {
            id: .userId,
            content: "Resource: \(.resourceName)
Role: \(.functionalTitle)
Division: \(.division)
Subdivision: \(.subDivisionPillarName)
Skills: \(.productFunctionArea)
Projects: \(.ppmProject)
Region: \(.region)
Manager: \(.supervisorName)
Email: \(.employeeEmailAddress)
Employee Type: \(.employeeType)
Service Band: \(.serviceBand)",
            metadata: {
                resourceName: .resourceName,
                functionalTitle: .functionalTitle,
                division: .division,
                subDivision: .subDivisionPillarName,
                productArea: .productFunctionArea,
                manager: .supervisorName,
                email: .employeeEmailAddress,
                region: .region,
                employeeType: .employeeType,
                serviceBand: .serviceBand,
                projects: .ppmProject,
                costCode: .costCode,
                corporateTitle: .corporateTitle
            }
        }
        '''

    def load_data(self):
        """Load and index the JSON data"""
        loader = JSONLoader(
            file_path=self.json_path,
            jq_schema=self._get_jq_schema(),
            text_content=False
        )
        
        docs = loader.load()
        self.vectorstore = FAISS.from_documents(docs, self.embeddings)
        
    def search(self, query, k=5):
        """Search across all fields"""
        if not self.vectorstore:
            self.load_data()
            
        results = self.vectorstore.similarity_search(query, k=k)
        
        formatted_results = []
        for doc in results:
            formatted_results.append({
                "content": doc.page_content,
                "metadata": doc.metadata
            })
            
        return formatted_results

# Usage Example
if __name__ == "__main__":
    search_engine = JSONSearchEngine("your_data.json")
    
    # Example queries - will work with any field
    queries = [
        "Vandan Panwala",  # Name search
        "Cloud engineers in EMEA",  # Role + region
        "PPM Project X123",  # Project ID
        "Manager John Doe",  # Manager search
        "Contract employees",  # Employee type
        "Service Band D"  # Specific band
    ]
    
    for query in queries:
        print(f"\nSearching for: {query}")
        results = search_engine.search(query)
        
        for i, result in enumerate(results, 1):
            print(f"\nResult {i}:")
            print(result["content"])
            print("Metadata:", json.dumps(result["metadata"], indent=2))
            print(f"Relevance Score: {result['score']}")
            print("-" * 50)
